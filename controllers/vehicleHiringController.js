import { VehicleRegistration, DriverHiring } from "../models/vehicleHiringModel.js";
import User from "../models/userModel.js";
import asyncHandler from "express-async-handler";
import jwt from "jsonwebtoken";
import path from "path";

const uploadToLocal = (file) => (file ? path.join("uploads", file.filename).replace(/\\/g, "/") : null);

// API 1: Register Vehicle
const registerVehicle = asyncHandler(async (req, res) => {
  const {
    userId,
    vehicleOwnerName,
    companyName,
    vehiclePlateNumber,
    vehicleMakeModel,
    chassisNumber,
    vehicleColor,
    registrationExpiryDate,
    serviceType,
    serviceCategory,
    vehicleType,
    wheelchair,
    packingHelper,
    loadingUnloadingHelper,
    fixingHelper,
  } = req.body;

  const user = await User.findById(userId);
  if (!user || user.kycLevel < 1) {
    return res.status(403).json({ message: "Complete and get approved for KYC Level 1 first", token: req.cookies.token });
  }
  if (user.hasVehicle !== "yes") {
    return res.status(400).json({ message: "Vehicle ownership must be set to 'yes' to register a vehicle", token: req.cookies.token });
  }

  const vehicleRegistrationCardFront = req.files?.vehicleRegistrationCardFront ? uploadToLocal(req.files.vehicleRegistrationCardFront[0]) : null;
  const vehicleRegistrationCardBack = req.files?.vehicleRegistrationCardBack ? uploadToLocal(req.files.vehicleRegistrationCardBack[0]) : null;
  const roadAuthorityCertificateUrl = req.files?.roadAuthorityCertificate ? uploadToLocal(req.files.roadAuthorityCertificate[0]) : null;
  const insuranceCertificateUrl = req.files?.insuranceCertificate ? uploadToLocal(req.files.insuranceCertificate[0]) : null;
  const vehicleImagesUrls = req.files?.vehicleImages ? req.files.vehicleImages.map((f) => uploadToLocal(f)) : [];

  const vehicle = new VehicleRegistration({
    userId,
    vehicleRegistrationCard: { front: vehicleRegistrationCardFront, back: vehicleRegistrationCardBack },
    roadAuthorityCertificate: roadAuthorityCertificateUrl,
    insuranceCertificate: insuranceCertificateUrl,
    vehicleImages: vehicleImagesUrls,
    vehicleOwnerName: vehicleOwnerName || null,
    companyName: companyName || null,
    vehiclePlateNumber: vehiclePlateNumber || null,
    vehicleMakeModel: vehicleMakeModel || null,
    chassisNumber: chassisNumber || null,
    vehicleColor: vehicleColor || null,
    registrationExpiryDate: registrationExpiryDate ? new Date(registrationExpiryDate) : null,
    serviceType: serviceType || null,
    serviceCategory: serviceCategory || null,
    vehicleType: vehicleType || null,
    wheelchair: wheelchair !== undefined ? Boolean(wheelchair) : false,
    packingHelper: packingHelper !== undefined ? Boolean(packingHelper) : false,
    loadingUnloadingHelper: loadingUnloadingHelper !== undefined ? Boolean(loadingUnloadingHelper) : false,
    fixingHelper: fixingHelper !== undefined ? Boolean(fixingHelper) : false,
  });
  await vehicle.save();

  user.pendingVehicleData = vehicle._id;
  await user.save();

  const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: process.env.JWT_EXPIRY });
  res.cookie("token", token, { httpOnly: true, maxAge: 3600000 });

  res.status(201).json({
    message: "Vehicle registered successfully",
    vehicleId: vehicle._id,
    token,
  });
});

// API 2: Set Driver Decision
const setDriverDecision = asyncHandler(async (req, res) => {
  const { userId, hasDriver } = req.body;

  const user = await User.findById(userId);
  if (!user) {
    return res.status(404).json({ message: "User not found", token: req.cookies.token });
  }

  user.hasDriver = hasDriver === "yes" ? "yes" : "no";
  await user.save();

  const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: process.env.JWT_EXPIRY });
  res.cookie("token", token, { httpOnly: true, maxAge: 3600000 });

  if (hasDriver === "no") {
    res.status(200).json({
      message: "Redirect to driver hiring form",
      token,
    });
  } else {
    res.status(200).json({
      message: "Driver decision set to yes, vehicle registration complete",
      token,
    });
  }
});

// API 3: Submit Driver Hiring
const submitDriverHiring = asyncHandler(async (req, res) => {
  const {
    userId,
    vehicleOwnerName,
    companyName,
    companyEmirate,
    vehicleType,
    vehiclePlateNumber,
    vehicleMakeModel,
    engagementType,
    salaryOffered,
    driverCanOfferCounterRent,
    agreementDuration,
    customDurationAmount,
    maintenanceResponsibilities,
    workSchedule,
    shiftTimingOrDutyHours,
    preferredStartDate,
    informationConfirmed,
    autoGeneratedAgreement,
    mutualApproval,
    termsAgreed,
    digitalSignature,
  } = req.body;

  const user = await User.findById(userId);
  if (!user || user.hasDriver !== "no") {
    return res.status(403).json({ message: "User must select 'no' for driver to submit hiring request", token: req.cookies.token });
  }

  const vehicleImagesUrls = req.files?.vehicleImages ? req.files.vehicleImages.map((f) => uploadToLocal(f)) : [];
  const registrationCardFront = req.files?.registrationCardFront ? uploadToLocal(req.files.registrationCardFront[0]) : null;
  const registrationCardBack = req.files?.registrationCardBack ? uploadToLocal(req.files.registrationCardBack[0]) : null;

  const driverHiring = new DriverHiring({
    userId,
    vehicleOwnerName: vehicleOwnerName || "",
    companyName: companyName || "",
    companyEmirate: companyEmirate || "",
    vehicleType: vehicleType || "",
    vehiclePlateNumber: vehiclePlateNumber || "",
    vehicleMakeModel: vehicleMakeModel || "",
    registrationCard: { front: registrationCardFront, back: registrationCardBack },
    vehicleImages: vehicleImagesUrls,
    engagementType,
    salaryOffered: engagementType === "Salary Based" ? Number(salaryOffered) : undefined,
    driverCanOfferCounterRent: Boolean(driverCanOfferCounterRent),
    agreementDuration,
    customDurationAmount: agreementDuration === "Custom" ? Number(customDurationAmount) : undefined,
    maintenanceResponsibilities: {
      minor: {
        dailyFuel: maintenanceResponsibilities?.minor?.dailyFuel || false,
        carWash: maintenanceResponsibilities?.minor?.carWash || false,
        oilChange: maintenanceResponsibilities?.minor?.oilChange || false,
        tyrePressureCheck: maintenanceResponsibilities?.minor?.tyrePressureCheck || false,
      },
      major: {
        engineRepairs: maintenanceResponsibilities?.major?.engineRepairs || false,
        transmissionSystem: maintenanceResponsibilities?.major?.transmissionSystem || false,
        acSystem: maintenanceResponsibilities?.major?.acSystem || false,
      },
      ownerResponsible: maintenanceResponsibilities?.ownerResponsible || false,
      driverResponsible: maintenanceResponsibilities?.driverResponsible || false,
    },
    workSchedule,
    shiftTimingOrDutyHours,
    preferredStartDate: new Date(preferredStartDate),
    informationConfirmed: Boolean(informationConfirmed),
    autoGeneratedAgreement: Boolean(autoGeneratedAgreement),
    mutualApproval: Boolean(mutualApproval),
    termsAgreed: Boolean(termsAgreed),
    digitalSignature,
  });

  await driverHiring.save();

  const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: process.env.JWT_EXPIRY });
  res.cookie("token", token, { httpOnly: true, maxAge: 3600000 });

  res.status(201).json({
    message: "Driver hiring request submitted successfully",
    driverHiringId: driverHiring._id,
    token,
  });
});


const getVehicleAndDriverHiring = asyncHandler(async (req, res) => {
  const { userId } = req.query;

  // Verify user exists and is authenticated
  const user = await User.findById(userId);
  if (!user) {
    return res.status(404).json({ message: "User not found", token: req.cookies.token });
  }

  // Fetch vehicle registrations
  const vehicles = await VehicleRegistration.find({ userId })
    .select("-__v") // Exclude version key
    .lean();

  // Fetch driver hiring requests
  const driverHirings = await DriverHiring.find({ userId })
    .select("-__v") // Exclude version key
    .lean();

  // Prepare response
  const response = {
    message: "Vehicle and driver hiring data retrieved successfully",
    vehicles,
    driverHirings,
    token: req.cookies.token,
  };

  res.status(200).json(response);
});



export { registerVehicle, setDriverDecision, submitDriverHiring , getVehicleAndDriverHiring  };